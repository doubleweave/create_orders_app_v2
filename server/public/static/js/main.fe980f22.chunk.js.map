{"version":3,"sources":["components/createOrders/createOrdersReducer.js","components/context/createOrdersContext.js","components/createOrders/subForms/TotalAmount.js","components/createOrders/subForms/Consumer.js","components/createOrders/subForms/Billing.js","components/createOrders/subForms/Shipping.js","components/createOrders/subForms/Item.js","components/createOrders/subForms/ItemList.js","components/createOrders/subForms/Items.js","api/myAxios.js","api/index.js","components/createOrders/subForms/Merchant.js","components/createOrders/Form.js","components/createOrders/index.js","App.js","index.js"],"names":["createOrdersReducer","state","action","value","itemIndex","type","payload","data","console","log","totalAmount","amount","currency","consumer","givenNames","phoneNumber","surname","email","billing","countryCode","name","postcode","suburb","line1","shipping","items","gtin","quantity","price","category","sku","brand","merchant","redirectCancelUrl","redirectConfirmUrl","merchantReference","shippingAmount","orderExpiryMilliseconds","push","targetIndex","splice","createOrdersContext","createContext","pageStyle","width","xs","sm","xl","height","margin","display","flexDirection","justifyContent","alignItems","flexGrow","flexShrink","formTopLabel","textAlign","lineHeight","amountDefault","TotalAmount","val","useContext","history","useHistory","useState","errMsg","setErrMsg","Box","className","sx","Card","CardContent","FormLabel","component","Grid","container","justify","direction","color","marginLeft","Stack","spacing","Autocomplete","freeSolo","id","disableClearable","onChange","e","values","options","map","option","renderInput","params","TextField","required","label","InputProps","target","Divider","Button","variant","onClick","fullWidth","disabled","replace","Consumer","placeholder","Billing","Shipping","postCode","overflowY","Item","Paper","mt","Typography","fontSize","gutterBottom","mb","ItemList","React","open","setOpen","ListItem","secondaryAction","IconButton","edge","ListItemButton","divider","ListItemText","primary","Collapse","in","timeout","unmountOnExit","List","disablePadding","Items","ml","bgcolor","itemData","index","backgroundColor","isErr","length","i","a","url","config","dataStr","Object","keys","forEach","key","substring","lastIndexOf","axios","get","post","reqCreateOrders","orderForm","myAxios","creatOrdersFn","formData","response","result","status","checkoutUrl","MerchantInfo","waitRes","setWaitRes","handleSubmit","res","window","location","href","border","BorderLinearProgress","styled","LinearProgress","theme","borderRadius","linearProgressClasses","colorPrimary","palette","grey","mode","bar","Form","useLocation","FormTitle","progressWidth","setProgressWidth","path","pathname","useEffect","page","findIndex","item","CircularProgress","left","Merchant","initUserReducer","Provider","StoreProvider","children","useReducer","dispatch","store","useMemo","createTheme","App","StyledEngineProvider","injectFirst","ThemeProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe980f22.chunk.js","sourcesContent":["const createOrdersReducer = (state, action) => {\r\n  const { type, payload } = action\r\n  let value\r\n  let itemIndex\r\n  const data = { ...state }\r\n  switch (type) {\r\n    //totalAmount\r\n    case 'CREATE_ORDERS_UPDATE_TOTALAMOUNT_AMOUNT':\r\n      console.log('payload: ', payload)\r\n      data.totalAmount.amount = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_TOTALAMOUNT_CURRENCY':\r\n      console.log('payload: ', payload)\r\n      data.totalAmount.currency = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n\r\n    //consumer\r\n    case 'CREATE_ORDERS_UPDATE_CONSUMER_GIVENNAMES':\r\n      console.log('payload: ', payload)\r\n      data.consumer.givenNames = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_CONSUMER_PHONENUMBER':\r\n      console.log('payload: ', payload)\r\n      data.consumer.phoneNumber = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_CONSUMER_SURNAME':\r\n      console.log('payload: ', payload)\r\n      data.consumer.surname = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_CONSUMER_EMAIL':\r\n      console.log('payload: ', payload)\r\n      data.consumer.email = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n\r\n    //billing\r\n    case 'CREATE_ORDERS_UPDATE_BILLING_PHONENUMBER':\r\n      console.log('phoneNumber: ', payload)\r\n      data.billing.phoneNumber = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_BILLING_COUNTRYCODE':\r\n      console.log('payload: ', payload)\r\n      data.billing.countryCode = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_BILLING_NAME':\r\n      console.log('payload: ', payload)\r\n      data.billing.name = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_BILLING_POSTCODE':\r\n      console.log('payload: ', payload)\r\n      data.billing.postcode = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_BILLING_SUBURB':\r\n      console.log('payload: ', payload)\r\n      data.billing.suburb = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_BILLING_LINE1':\r\n      console.log('payload: ', payload)\r\n      data.billing.line1 = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n\r\n    //shipping\r\n    case 'CREATE_ORDERS_UPDATE_SHIPPING_PHONENUMBER':\r\n      console.log('phoneNumber: ', payload)\r\n      data.shipping.phoneNumber = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_SHIPPING_COUNTRYCODE':\r\n      console.log('payload: ', payload)\r\n      data.shipping.countryCode = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_SHIPPING_NAME':\r\n      console.log('payload: ', payload)\r\n      data.shipping.name = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_SHIPPING_POSTCODE':\r\n      console.log('payload: ', payload)\r\n      data.shipping.postcode = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_SHIPPING_SUBURB':\r\n      console.log('payload: ', payload)\r\n      data.shipping.suburb = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_SHIPPING_LINE1':\r\n      console.log('payload: ', payload)\r\n      data.shipping.line1 = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n\r\n    //items\r\n    case 'CREATE_ORDERS_UPDATE_ITEMS_GTIN':\r\n      console.log('phoneNumber: ', payload)\r\n      value = payload.value\r\n      itemIndex = payload.itemIndex\r\n      data.items[itemIndex].gtin = value\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_ITEMS_QUANTITY':\r\n      console.log('payload: ', payload)\r\n      value = payload.value\r\n      itemIndex = payload.itemIndex\r\n      data.items[itemIndex].quantity = value\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_ITEMS_PRICE_AMOUNT':\r\n      console.log('payload: ', payload)\r\n      value = payload.value\r\n      itemIndex = payload.itemIndex\r\n      data.items[itemIndex].price.amount = value\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_ITEMS_PRICE_CURRENCY':\r\n      console.log('payload: ', payload)\r\n      value = payload.value\r\n      itemIndex = payload.itemIndex\r\n      data.items[itemIndex].price.currency = value\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_ITEMS_NAME':\r\n      console.log('payload: ', payload)\r\n      value = payload.value\r\n      itemIndex = payload.itemIndex\r\n      data.items[itemIndex].name = value\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_ITEMS_CATEGORY':\r\n      console.log('payload: ', payload)\r\n      value = payload.value\r\n      itemIndex = payload.itemIndex\r\n      data.items[itemIndex].category = value\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_ITEMS_SKU':\r\n      console.log('phoneNumber: ', payload)\r\n      value = payload.value\r\n      itemIndex = payload.itemIndex\r\n      data.items[itemIndex].sku = value\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_ITEMS_BRAND':\r\n      console.log('payload: ', payload)\r\n      value = payload.value\r\n      itemIndex = payload.itemIndex\r\n      data.items[itemIndex].brand = value\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n\r\n    //merchant\r\n    case 'CREATE_ORDERS_UPDATE_MERCHANT_REDIRECTCANCELURL':\r\n      console.log('phoneNumber: ', payload)\r\n      data.merchant.redirectCancelUrl = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_MERCHANT_REDIRECTCONFIRMURL':\r\n      console.log('payload: ', payload)\r\n      data.merchant.redirectConfirmUrl = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_MERCHANTREFERENCE':\r\n      console.log('payload: ', payload)\r\n      data.merchantReference = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_SHIPPINGAMOUNT_AMOUNT':\r\n      console.log('payload: ', payload)\r\n      data.shippingAmount.amount = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_SHIPPINGAMOUNT_CURRENCY':\r\n      console.log('payload: ', payload)\r\n      data.shippingAmount.currency = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    case 'CREATE_ORDERS_UPDATE_ORDEREXPIRYMILLISECONDS':\r\n      console.log('payload: ', payload)\r\n      data.orderExpiryMilliseconds = payload\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n\r\n    // for testing\r\n    case 'SET_DEFAULT_VALUE_FOR_CREATE_ORDERS':\r\n      return {\r\n        totalAmount: {\r\n          amount: '190.00',\r\n          currency: 'EUR',\r\n        },\r\n        consumer: {\r\n          givenNames: 'Joe',\r\n          phoneNumber: '0400000001',\r\n          surname: 'Li',\r\n          email: 'test@scalapay.com',\r\n        },\r\n        billing: {\r\n          phoneNumber: '0400000000',\r\n          countryCode: 'IT',\r\n          name: 'Joe Consumer',\r\n          postcode: '50056',\r\n          suburb: 'Montelupo Fiorentino',\r\n          line1: 'Via della Rosa, 58',\r\n        },\r\n        shipping: {\r\n          phoneNumber: '0400000000',\r\n          countryCode: 'IT',\r\n          name: 'Joe Consumer',\r\n          postcode: '50056',\r\n          suburb: 'Montelupo Fiorentino',\r\n          line1: 'Via della Rosa, 58',\r\n        },\r\n        items: [\r\n          {\r\n            price: {\r\n              amount: '10.00',\r\n              currency: 'EUR',\r\n            },\r\n            quantity: 1,\r\n            gtin: '123458791330',\r\n            name: 'T-Shirt',\r\n            category: 'clothes',\r\n            sku: '12341234',\r\n            brand: 'TopChoice',\r\n          },\r\n        ],\r\n        merchant: {\r\n          redirectCancelUrl: 'https://portal.staging.scalapay.com/failure-url',\r\n          redirectConfirmUrl: 'https://portal.staging.scalapay.com/success-url',\r\n        },\r\n        shippingAmount: {\r\n          amount: '10.00',\r\n          currency: 'EUR',\r\n        },\r\n        orderExpiryMilliseconds: 600000,\r\n        merchantReference: 'merchantOrder-1234',\r\n      }\r\n\r\n    // fill in items form for testing\r\n    case 'SET_DEFAULT_VALUE_FOR_ITEMS_OBJECT':\r\n      const testingNewItem = {\r\n        price: {\r\n          amount: '30.00',\r\n          currency: 'EUR',\r\n        },\r\n        quantity: 2,\r\n        gtin: '223344556677',\r\n        name: 'Hat',\r\n        category: 'clothes',\r\n        sku: '23452345',\r\n        brand: 'BestChoice',\r\n      }\r\n      data.items.push(testingNewItem)\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n\r\n    // add a new object in items array\r\n    case 'CREATE_ORDERS_CREATE_NEW_OBJECT_IN_ITEMS':\r\n      console.log('payload: ', payload)\r\n      const newItem = {\r\n        price: {\r\n          amount: '',\r\n          currency: '',\r\n        },\r\n        quantity: 1,\r\n        gtin: '',\r\n        name: '',\r\n        category: '',\r\n        sku: '',\r\n        brand: '',\r\n      }\r\n      data.items.push(newItem)\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n    // delete target object in items array\r\n    case 'CREATE_ORDERS_DELETE_TARGET_ITEM_IN_ITEMS':\r\n      console.log('payload: ', payload)\r\n      const targetIndex = payload\r\n      data.items.splice(targetIndex, 1)\r\n      console.log('data in reducer: ', data)\r\n      return {\r\n        ...data,\r\n      }\r\n\r\n    default:\r\n      return {\r\n        ...state,\r\n      }\r\n  }\r\n}\r\n\r\nexport default createOrdersReducer\r\n","import { createContext, Context } from 'react'\r\n\r\n// createContext: passing orders data stored in useReducer\r\nconst createOrdersContext = createContext(null)\r\n\r\nexport default createOrdersContext\r\n","import React, { useState, useContext } from 'react'\r\nimport createOrdersContext from '../../context/createOrdersContext'\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  FormLabel,\r\n  Divider,\r\n  Button,\r\n  Box,\r\n  Stack,\r\n  Autocomplete,\r\n  Card,\r\n  CardContent,\r\n} from '@mui/material'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst gridItemText = {\r\n  mt: 1,\r\n  mb: 1,\r\n}\r\n\r\nconst pageStyle = {\r\n  width: {\r\n    xs: '100%',\r\n    sm: '380px',\r\n    xl: '380px',\r\n  },\r\n  height: '95vh',\r\n  margin: '0 auto',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'space-between',\r\n  flexGrow: 1,\r\n  flexShrink: 1,\r\n}\r\n\r\nconst formTopLabel = {\r\n  width: '100%',\r\n  height: '50px',\r\n  textAlign: 'center',\r\n  lineHeight: '50px',\r\n}\r\n\r\nconst amountDefault = [{ amount: '190.00' }]\r\n\r\nfunction TotalAmount() {\r\n  // get state and dispatch from context\r\n  // val[0]: state\r\n  // val[1]: dispatch function\r\n  const val = useContext(createOrdersContext)\r\n  console.log('val[0]: ', val)\r\n  const history = useHistory()\r\n\r\n  // if required field is empty, errMsg will be displayed\r\n  const [errMsg, setErrMsg] = useState('')\r\n  const toConsumerPage = () => {\r\n    if (val[0].totalAmount.amount === '') {\r\n      setErrMsg('Amount field is required!!')\r\n    } else if (val[0].totalAmount.currency === '') {\r\n      setErrMsg('Currency field is required!!')\r\n    } else {\r\n      history.replace('/consumer')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box className=\"form\" sx={pageStyle}>\r\n        <Card>\r\n          <CardContent>\r\n            <form>\r\n              <FormLabel sx={formTopLabel} component=\"legend\">\r\n                TotalAmount\r\n              </FormLabel>\r\n              <div className=\"body-container\">\r\n                <Grid\r\n                  container\r\n                  alignItems=\"center\"\r\n                  justify=\"center\"\r\n                  direction=\"column\"\r\n                >\r\n                  {errMsg ? (\r\n                    <Box\r\n                      sx={{\r\n                        color: 'red',\r\n                        marginLeft: '1em',\r\n                      }}\r\n                    >\r\n                      {errMsg}\r\n                    </Box>\r\n                  ) : null}\r\n                  <Stack spacing={2} sx={{ width: 300 }}>\r\n                    {/* Autocomplete module: show default value */}\r\n                    <Autocomplete\r\n                      freeSolo\r\n                      id=\"amount\"\r\n                      disableClearable\r\n                      className=\"totalAmount_amount\"\r\n                      value={val[0].totalAmount.amount}\r\n                      // onchange for drop down list\r\n                      onChange={(e, values) => {\r\n                        val[1]({\r\n                          type: 'CREATE_ORDERS_UPDATE_TOTALAMOUNT_AMOUNT',\r\n                          payload: values,\r\n                        })\r\n                      }}\r\n                      options={amountDefault.map((option) => option.amount)}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          className=\"totalAmount_amount_input\"\r\n                          required={true}\r\n                          {...params}\r\n                          label=\"Amount\"\r\n                          InputProps={{\r\n                            ...params.InputProps,\r\n                            type: 'text',\r\n                            // for jest testing\r\n                            'data-testid': 'amount_autocomplete',\r\n                          }}\r\n                          // onChange for textField\r\n                          onChange={(e) => {\r\n                            val[1]({\r\n                              type: 'CREATE_ORDERS_UPDATE_TOTALAMOUNT_AMOUNT',\r\n                              payload: e.target.value,\r\n                            })\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                    <Divider />\r\n\r\n                    <Autocomplete\r\n                      freeSolo\r\n                      id=\"currency\"\r\n                      disableClearable\r\n                      value={val[0].totalAmount.currency}\r\n                      onChange={(e, values) => {\r\n                        val[1]({\r\n                          type: 'CREATE_ORDERS_UPDATE_TOTALAMOUNT_CURRENCY',\r\n                          payload: values,\r\n                        })\r\n                      }}\r\n                      options={['EUR']}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          required={true}\r\n                          {...params}\r\n                          label=\"currency\"\r\n                          InputProps={{\r\n                            ...params.InputProps,\r\n                            type: 'text',\r\n                          }}\r\n                          onChange={(e) => {\r\n                            val[1]({\r\n                              type: 'CREATE_ORDERS_UPDATE_TOTALAMOUNT_CURRENCY',\r\n                              payload: e.target.value,\r\n                            })\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Stack>\r\n                </Grid>\r\n              </div>\r\n            </form>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            type=\"submit\"\r\n            onClick={() => {\r\n              val[1]({\r\n                type: 'SET_DEFAULT_VALUE_FOR_CREATE_ORDERS',\r\n                payload: '',\r\n              })\r\n            }}\r\n            fullWidth\r\n          >\r\n            {/* quick button: filling value into forms, to test final submit function */}\r\n            Default value for testing \"submit\"\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            type=\"submit\"\r\n            disabled\r\n            fullWidth\r\n          >\r\n            {/* back to previous page */}\r\n            Previous\r\n          </Button>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            onClick={toConsumerPage}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TotalAmount\r\n","import React, { useState, useContext } from 'react'\r\nimport createOrdersContext from '../../context/createOrdersContext'\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  FormLabel,\r\n  Divider,\r\n  Button,\r\n  Box,\r\n  Stack,\r\n  Autocomplete,\r\n} from '@mui/material'\r\n\r\nimport { useHistory, Redirect } from 'react-router-dom'\r\n\r\nconst gridItemText = {\r\n  mt: 1,\r\n  mb: 1,\r\n}\r\n\r\nconst pageStyle = {\r\n  width: {\r\n    xs: '100%',\r\n    sm: '380px',\r\n    xl: '380px',\r\n  },\r\n  height: '95vh',\r\n  margin: '0 auto',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'space-between',\r\n  flexGrow: 1,\r\n  flexShrink: 1,\r\n}\r\n\r\nconst formTopLabel = {\r\n  width: '100%',\r\n  height: '50px',\r\n  textAlign: 'center',\r\n  lineHeight: '50px',\r\n}\r\n\r\nfunction Consumer() {\r\n  const val = useContext(createOrdersContext)\r\n  console.log('val[0]: ', val[0])\r\n  const history = useHistory()\r\n  const [errMsg, setErrMsg] = useState('')\r\n  const toBillingPage = () => {\r\n    if (val[0].consumer.givenNames === '') {\r\n      setErrMsg('GivenNames is required!!')\r\n    } else if (val[0].consumer.surname === '') {\r\n      setErrMsg('Surname is required!!')\r\n    } else {\r\n      history.replace('/billing')\r\n    }\r\n  }\r\n  const toTotalAmountPage = () => {\r\n    history.replace('/totalAmount')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box className=\"form\" sx={pageStyle}>\r\n        <div>\r\n          <form>\r\n            <FormLabel sx={formTopLabel} component=\"legend\">\r\n              Consumer\r\n            </FormLabel>\r\n            <div className=\"body-container\">\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n                direction=\"column\"\r\n              >\r\n                {errMsg ? (\r\n                  <Box\r\n                    sx={{\r\n                      color: 'red',\r\n                      marginLeft: '1em',\r\n                    }}\r\n                  >\r\n                    {errMsg}\r\n                  </Box>\r\n                ) : null}\r\n                <Stack spacing={2} sx={{ width: 300 }}>\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"phoneNumber\"\r\n                    disableClearable\r\n                    value={val[0].consumer.phoneNumber}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_CONSUMER_PHONENUMBER',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['0400000001']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"phoneNumber\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_CONSUMER_PHONENUMBER',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"givenNames\"\r\n                    disableClearable\r\n                    value={val[0].consumer.givenNames}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_CONSUMER_GIVENNAMES',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['Joe']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        required={true}\r\n                        {...params}\r\n                        label=\"givenNames\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_CONSUMER_GIVENNAMES',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n                  <TextField\r\n                    required={true}\r\n                    id=\"surname\"\r\n                    label=\"surname\"\r\n                    type=\"text\"\r\n                    placeholder=\"\"\r\n                    value={val[0].consumer.surname}\r\n                    onChange={(e) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_CONSUMER_SURNAME',\r\n                        payload: e.target.value,\r\n                      })\r\n                    }}\r\n                  />\r\n                  <Divider />\r\n\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"email\"\r\n                    disableClearable\r\n                    value={val[0].consumer.email}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_CONSUMER_EMAIL',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['test@scalapay.com']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"email\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_CONSUMER_EMAIL',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            type=\"submit\"\r\n            onClick={toTotalAmountPage}\r\n            fullWidth\r\n          >\r\n            Previous\r\n          </Button>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            onClick={toBillingPage}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Consumer\r\n","import React, { useState, useContext } from 'react'\r\nimport createOrdersContext from '../../context/createOrdersContext'\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  FormLabel,\r\n  Divider,\r\n  Button,\r\n  Box,\r\n  Stack,\r\n  Autocomplete,\r\n} from '@mui/material'\r\nimport { useHistory, Redirect } from 'react-router-dom'\r\n\r\nconst gridItemText = {\r\n  mt: 1,\r\n  mb: 1,\r\n}\r\n\r\nconst pageStyle = {\r\n  width: {\r\n    xs: '100%',\r\n    sm: '380px',\r\n    xl: '380px',\r\n  },\r\n  height: '95vh',\r\n  margin: '0 auto',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'space-between',\r\n  flexGrow: 1,\r\n  flexShrink: 1,\r\n}\r\n\r\nconst formTopLabel = {\r\n  width: '100%',\r\n  height: '50px',\r\n  textAlign: 'center',\r\n  lineHeight: '50px',\r\n}\r\n\r\nfunction Billing() {\r\n  const val = useContext(createOrdersContext)\r\n  console.log('val[0]: ', val[0])\r\n\r\n  const history = useHistory()\r\n  const toShippingPage = () => {\r\n    history.replace('/shipping')\r\n  }\r\n  const toConsumerPage = () => {\r\n    history.replace('/consumer')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box className=\"form\" sx={pageStyle}>\r\n        <div>\r\n          <form>\r\n            <FormLabel sx={formTopLabel} component=\"legend\">\r\n              Billing\r\n            </FormLabel>\r\n            <div className=\"body-container\">\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n                direction=\"column\"\r\n              >\r\n                <Stack spacing={2} sx={{ width: 300 }}>\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"phoneNumber\"\r\n                    disableClearable\r\n                    value={val[0].billing.phoneNumber}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_BILLING_PHONENUMBER',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['0400000000']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"phoneNumber\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_BILLING_PHONENUMBER',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"countryCode\"\r\n                    disableClearable\r\n                    value={val[0].billing.countryCode}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_BILLING_COUNTRYCODE',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['IT']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"countryCode\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_BILLING_COUNTRYCODE',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"name\"\r\n                    disableClearable\r\n                    value={val[0].billing.name}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_BILLING_NAME',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['Joe Consumer']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"name\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_BILLING_NAME',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"postcode\"\r\n                    disableClearable\r\n                    value={val[0].billing.postcode}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_BILLING_POSTCODE',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['50056']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"postcode\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_BILLING_POSTCODE',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"suburb\"\r\n                    disableClearable\r\n                    value={val[0].billing.suburb}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_BILLING_SUBURB',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['Montelupo Fiorentino']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"suburb\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_BILLING_SUBURB',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"line1\"\r\n                    disableClearable\r\n                    value={val[0].billing.line1}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_BILLING_LINE1',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['Via della Rosa, 58']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"line1\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_BILLING_LINE1',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            type=\"submit\"\r\n            onClick={toConsumerPage}\r\n            fullWidth\r\n          >\r\n            Previous\r\n          </Button>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            onClick={toShippingPage}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Billing\r\n","import React, { useState, useContext } from 'react'\r\nimport createOrdersContext from '../../context/createOrdersContext'\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  FormLabel,\r\n  Divider,\r\n  Button,\r\n  Box,\r\n  Stack,\r\n  Autocomplete,\r\n} from '@mui/material'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst gridItemText = {\r\n  mt: 1,\r\n  mb: 1,\r\n}\r\n\r\nconst pageStyle = {\r\n  width: {\r\n    xs: '100%',\r\n    sm: '380px',\r\n    xl: '380px',\r\n  },\r\n  height: '95vh',\r\n  margin: '0 auto',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'space-between',\r\n  flexGrow: 1,\r\n  flexShrink: 1,\r\n}\r\n\r\nconst formTopLabel = {\r\n  width: '100%',\r\n  height: '50px',\r\n  textAlign: 'center',\r\n  lineHeight: '50px',\r\n}\r\n\r\nfunction Shipping() {\r\n  const val = useContext(createOrdersContext)\r\n  console.log('val[0]: ', val[0])\r\n\r\n  const history = useHistory()\r\n  const [errMsg, setErrMsg] = useState('')\r\n  const toItemsPage = () => {\r\n    if (val[0].shipping.countryCode === '') {\r\n      setErrMsg('CountryCode is required!!')\r\n    } else if (val[0].shipping.name === '') {\r\n      setErrMsg('Name field is required!!')\r\n    } else if (val[0].shipping.postCode === '') {\r\n      setErrMsg('PostCode field is required!!')\r\n    } else if (val[0].shipping.line1 === '') {\r\n      setErrMsg('Line1 field is required!!')\r\n    } else {\r\n      history.replace('/items')\r\n    }\r\n  }\r\n  const toBillingPage = () => {\r\n    history.replace('/billing')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box className=\"form\" sx={pageStyle}>\r\n        <div>\r\n          <form>\r\n            <FormLabel sx={formTopLabel} component=\"legend\">\r\n              Shipping\r\n            </FormLabel>\r\n            <div className=\"body-container\">\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n                direction=\"column\"\r\n              >\r\n                {errMsg ? (\r\n                  <Box\r\n                    sx={{\r\n                      color: 'red',\r\n                      marginLeft: '1em',\r\n                    }}\r\n                  >\r\n                    {errMsg}\r\n                  </Box>\r\n                ) : null}\r\n\r\n                <Stack spacing={2} sx={{ width: 300 }}>\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"phoneNumber\"\r\n                    disableClearable\r\n                    value={val[0].shipping.phoneNumber}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_SHIPPING_PHONENUMBER',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['0400000000']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"phoneNumber\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_SHIPPING_PHONENUMBER',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"countryCode\"\r\n                    disableClearable\r\n                    value={val[0].shipping.countryCode}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_SHIPPING_COUNTRYCODE',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['IT']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        required={true}\r\n                        {...params}\r\n                        label=\"countryCode\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_SHIPPING_COUNTRYCODES',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"name\"\r\n                    disableClearable\r\n                    value={val[0].shipping.name}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_SHIPPING_NAME',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['Joe Consumer']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        required={true}\r\n                        {...params}\r\n                        label=\"name\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_SHIPPING_NAME',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"postcode\"\r\n                    disableClearable\r\n                    value={val[0].shipping.postcode}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_SHIPPING_POSTCODE',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['50056']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        required={true}\r\n                        {...params}\r\n                        label=\"postcode\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_SHIPPING_POSTCODE',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"suburb\"\r\n                    disableClearable\r\n                    value={val[0].shipping.suburb}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_SHIPPING_SUBURB',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['Montelupo Fiorentino']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"suburb\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_SHIPPING_SUBURB',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"line1\"\r\n                    disableClearable\r\n                    value={val[0].shipping.line1}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_SHIPPING_LINE1',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['Via della Rosa, 58']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        required={true}\r\n                        {...params}\r\n                        label=\"line1\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_SHIPPING_LINE1',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            type=\"submit\"\r\n            onClick={toBillingPage}\r\n            fullWidth\r\n          >\r\n            Previous\r\n          </Button>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            onClick={toItemsPage}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Shipping\r\n","import React, { useState, useContext } from 'react'\r\nimport createOrdersContext from '../../context/createOrdersContext'\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  FormLabel,\r\n  Button,\r\n  Box,\r\n  Paper,\r\n  Divider,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Stack,\r\n  Autocomplete,\r\n} from '@mui/material'\r\nimport { useHistory, Redirect } from 'react-router-dom'\r\n\r\nconst gridItemText = {\r\n  mt: 1,\r\n  mb: 1,\r\n}\r\n\r\nconst pageStyle = {\r\n  width: {\r\n    xs: '100%',\r\n    sm: '380px',\r\n    xl: '380px',\r\n  },\r\n  height: '80vh',\r\n  margin: '0 auto',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'space-between',\r\n  flexGrow: 1,\r\n  flexShrink: 1,\r\n  overflowY: 'scroll',\r\n}\r\n\r\nconst formTopLabel = {\r\n  width: '100%',\r\n  height: '50px',\r\n  textAlign: 'center',\r\n  lineHeight: '50px',\r\n}\r\n\r\nfunction Item({ itemIndex }) {\r\n  const val = useContext(createOrdersContext)\r\n  console.log('val[0]: ', val[0])\r\n  const history = useHistory()\r\n  const [errMsg, setErrMsg] = useState('')\r\n  const toMerchantPage = () => {\r\n    if (val[0].items[itemIndex].quantity === '') {\r\n      setErrMsg('Quantity is required!!')\r\n    } else if (val[0].items[itemIndex].price.amount === '') {\r\n      setErrMsg('Price amount field is required!!')\r\n    } else if (val[0].items[itemIndex].price.currency === '') {\r\n      setErrMsg('Price currency field  is required!!')\r\n    } else if (val[0].items[itemIndex].name === '') {\r\n      setErrMsg('Name field is required!!')\r\n    } else if (val[0].items[itemIndex].category === '') {\r\n      setErrMsg('Category field is required!!')\r\n    } else if (val[0].items[itemIndex].sku === '') {\r\n      setErrMsg('Sku field is required!!')\r\n    } else {\r\n      history.replace('/merchant')\r\n    }\r\n  }\r\n  const toShippingPage = () => {\r\n    history.replace('/shipping')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box className=\"form\" sx={pageStyle}>\r\n        <div>\r\n          <form>\r\n            {/* <FormLabel sx={formTopLabel} component=\"legend\">\r\n              Object\r\n            </FormLabel> */}\r\n            <div className=\"body-container\">\r\n              <Paper sx={{}}>\r\n                <Grid\r\n                  container\r\n                  alignItems=\"center\"\r\n                  justify=\"center\"\r\n                  direction=\"column\"\r\n                >\r\n                  {errMsg ? (\r\n                    <Box\r\n                      sx={{\r\n                        color: 'red',\r\n                        marginLeft: '1em',\r\n                      }}\r\n                    >\r\n                      {errMsg}\r\n                    </Box>\r\n                  ) : null}\r\n\r\n                  <Stack spacing={2} sx={{ width: 300 }}>\r\n                    <Autocomplete\r\n                      sx={{ mt: 1 }}\r\n                      freeSolo\r\n                      id=\"gtin\"\r\n                      disableClearable\r\n                      value={val[0].items[itemIndex].gtin}\r\n                      onChange={(e, value) => {\r\n                        val[1]({\r\n                          type: 'CREATE_ORDERS_UPDATE_ITEMS_GTIN',\r\n                          payload: { value, itemIndex },\r\n                        })\r\n                      }}\r\n                      options={['123458791330']}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          label=\"gtin\"\r\n                          InputProps={{\r\n                            ...params.InputProps,\r\n                            type: 'text',\r\n                          }}\r\n                          onChange={(e) => {\r\n                            const value = e.target.value\r\n                            val[1]({\r\n                              type: 'CREATE_ORDERS_UPDATE_ITEMS_GTIN',\r\n                              payload: { value, itemIndex },\r\n                            })\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                    <Divider />\r\n                    <TextField\r\n                      required={true}\r\n                      id=\"quantity\"\r\n                      label=\"quantity\"\r\n                      type=\"text\"\r\n                      placeholder=\"1\"\r\n                      value={val[0].items[itemIndex].quantity}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value\r\n                        val[1]({\r\n                          type: 'CREATE_ORDERS_UPDATE_ITEMS_QUANTITY',\r\n                          payload: { value, itemIndex },\r\n                        })\r\n                      }}\r\n                    />\r\n                    <Divider />\r\n\r\n                    <Card>\r\n                      <CardContent>\r\n                        <Typography\r\n                          sx={{ fontSize: 14 }}\r\n                          color=\"text.secondary\"\r\n                          gutterBottom\r\n                        >\r\n                          Price\r\n                        </Typography>\r\n                        <Autocomplete\r\n                          sx={{ mt: 1, mb: 1 }}\r\n                          freeSolo\r\n                          id=\"amount\"\r\n                          disableClearable\r\n                          value={val[0].items[itemIndex].price.amount}\r\n                          onChange={(e, value) => {\r\n                            val[1]({\r\n                              type: 'CREATE_ORDERS_UPDATE_ITEMS_PRICE_AMOUNT',\r\n                              payload: { value, itemIndex },\r\n                            })\r\n                          }}\r\n                          options={['10.00']}\r\n                          renderInput={(params) => (\r\n                            <TextField\r\n                              required={true}\r\n                              {...params}\r\n                              label=\"amount\"\r\n                              InputProps={{\r\n                                ...params.InputProps,\r\n                                type: 'text',\r\n                              }}\r\n                              onChange={(e) => {\r\n                                const value = e.target.value\r\n                                val[1]({\r\n                                  type: 'CREATE_ORDERS_UPDATE_ITEMS_PRICE_AMOUNT',\r\n                                  payload: { value, itemIndex },\r\n                                })\r\n                              }}\r\n                            />\r\n                          )}\r\n                        />\r\n                        <Divider />\r\n                        <Autocomplete\r\n                          sx={{ mt: 1, mb: 1 }}\r\n                          freeSolo\r\n                          id=\"currency\"\r\n                          disableClearable\r\n                          value={val[0].items[itemIndex].price.currency}\r\n                          onChange={(e, value) => {\r\n                            val[1]({\r\n                              type: 'CREATE_ORDERS_UPDATE_ITEMS_PRICE_CURRENCY',\r\n                              payload: { value, itemIndex },\r\n                            })\r\n                          }}\r\n                          options={['EUR']}\r\n                          renderInput={(params) => (\r\n                            <TextField\r\n                              required={true}\r\n                              {...params}\r\n                              label=\"currency\"\r\n                              InputProps={{\r\n                                ...params.InputProps,\r\n                                type: 'text',\r\n                              }}\r\n                              onChange={(e) => {\r\n                                const value = e.target.value\r\n                                val[1]({\r\n                                  type: 'CREATE_ORDERS_UPDATE_ITEMS_PRICE_CURRENCY',\r\n                                  payload: { value, itemIndex },\r\n                                })\r\n                              }}\r\n                            />\r\n                          )}\r\n                        />\r\n                      </CardContent>\r\n                    </Card>\r\n                    <Divider />\r\n                    <Autocomplete\r\n                      freeSolo\r\n                      id=\"name\"\r\n                      disableClearable\r\n                      value={val[0].items[itemIndex].name}\r\n                      onChange={(e, value) => {\r\n                        val[1]({\r\n                          type: 'CREATE_ORDERS_UPDATE_ITEMS_NAME',\r\n                          payload: { value, itemIndex },\r\n                        })\r\n                      }}\r\n                      options={['T-Shirt']}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          required={true}\r\n                          {...params}\r\n                          label=\"name\"\r\n                          InputProps={{\r\n                            ...params.InputProps,\r\n                            type: 'text',\r\n                          }}\r\n                          onChange={(e) => {\r\n                            const value = e.target.value\r\n                            val[1]({\r\n                              type: 'CREATE_ORDERS_UPDATE_ITEMS_NAME',\r\n                              payload: { value, itemIndex },\r\n                            })\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                    <Divider />\r\n                    <Autocomplete\r\n                      freeSolo\r\n                      id=\"category\"\r\n                      disableClearable\r\n                      value={val[0].items[itemIndex].category}\r\n                      onChange={(e, value) => {\r\n                        val[1]({\r\n                          type: 'CREATE_ORDERS_UPDATE_ITEMS_CATEGORY',\r\n                          payload: { value, itemIndex },\r\n                        })\r\n                      }}\r\n                      options={['clothes']}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          required={true}\r\n                          {...params}\r\n                          label=\"category\"\r\n                          InputProps={{\r\n                            ...params.InputProps,\r\n                            type: 'text',\r\n                          }}\r\n                          onChange={(e) => {\r\n                            const value = e.target.value\r\n                            val[1]({\r\n                              type: 'CREATE_ORDERS_UPDATE_ITEMS_CATEGORY',\r\n                              payload: { value, itemIndex },\r\n                            })\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                    <Divider />\r\n                    <Autocomplete\r\n                      freeSolo\r\n                      id=\"sku\"\r\n                      disableClearable\r\n                      value={val[0].items[itemIndex].sku}\r\n                      onChange={(e, value) => {\r\n                        val[1]({\r\n                          type: 'CREATE_ORDERS_UPDATE_ITEMS_SKU',\r\n                          payload: { value, itemIndex },\r\n                        })\r\n                      }}\r\n                      options={['12341234']}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          required={true}\r\n                          {...params}\r\n                          label=\"sku\"\r\n                          InputProps={{\r\n                            ...params.InputProps,\r\n                            type: 'text',\r\n                          }}\r\n                          onChange={(e) => {\r\n                            const value = e.target.value\r\n                            val[1]({\r\n                              type: 'CREATE_ORDERS_UPDATE_ITEMS_SKU',\r\n                              payload: { value, itemIndex },\r\n                            })\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                    <Divider />\r\n                    <Autocomplete\r\n                      freeSolo\r\n                      id=\"brand\"\r\n                      disableClearable\r\n                      value={val[0].items[itemIndex].brand}\r\n                      onChange={(e, value) => {\r\n                        val[1]({\r\n                          type: 'CREATE_ORDERS_UPDATE_ITEMS_BRAND',\r\n                          payload: { value, itemIndex },\r\n                        })\r\n                      }}\r\n                      options={['TopChoice']}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          label=\"brand\"\r\n                          InputProps={{\r\n                            ...params.InputProps,\r\n                            type: 'text',\r\n                          }}\r\n                          onChange={(e) => {\r\n                            const value = e.target.value\r\n                            val[1]({\r\n                              type: 'CREATE_ORDERS_UPDATE_ITEMS_BRAND',\r\n                              payload: { value, itemIndex },\r\n                            })\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Stack>\r\n                </Grid>\r\n              </Paper>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Item\r\n","import React, { useState, useContext } from 'react'\r\nimport createOrdersContext from '../../context/createOrdersContext'\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  FormLabel,\r\n  Button,\r\n  Box,\r\n  Paper,\r\n  Divider,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Stack,\r\n  Autocomplete,\r\n  List,\r\n  ListItem,\r\n  ListSubheader,\r\n  ListItemButton,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Collapse,\r\n  IconButton,\r\n} from '@mui/material'\r\nimport AddIcon from '@mui/icons-material/Add'\r\nimport RemoveIcon from '@mui/icons-material/Remove'\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\n\r\nimport { useHistory, Redirect } from 'react-router-dom'\r\nimport Item from './Item'\r\nimport createOrdersReducer from '../createOrdersReducer'\r\n\r\nconst gridItemText = {\r\n  mt: 1,\r\n  mb: 1,\r\n}\r\n\r\nconst pageStyle = {\r\n  width: {\r\n    xs: '100%',\r\n    sm: '380px',\r\n    xl: '380px',\r\n  },\r\n  height: '95vh',\r\n  margin: '0 auto',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'space-between',\r\n  flexGrow: 1,\r\n  flexShrink: 1,\r\n}\r\n\r\nconst formTopLabel = {\r\n  width: '100%',\r\n  height: '50px',\r\n  textAlign: 'center',\r\n  lineHeight: '50px',\r\n}\r\n\r\nfunction ItemList({ itemIndex }) {\r\n  const val = useContext(createOrdersContext)\r\n  console.log('in ItemList: val[0]: ', val[0])\r\n  const [open, setOpen] = React.useState(true)\r\n  const handleClick = () => {\r\n    setOpen(!open)\r\n  }\r\n  const handleItemDelete = () => {\r\n    val[1]({\r\n      type: 'CREATE_ORDERS_DELETE_TARGET_ITEM_IN_ITEMS',\r\n      payload: itemIndex,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ListItem\r\n        key={`itemList_${itemIndex}`}\r\n        secondaryAction={\r\n          <IconButton edge=\"end\" aria-label=\"delete\" onClick={handleItemDelete}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        }\r\n      >\r\n        <ListItemButton\r\n          onClick={handleClick}\r\n          sx={{ width: '100%' }}\r\n          divider={true}\r\n        >\r\n          <ListItemText primary=\"OBJECT\" />\r\n          {open ? <RemoveIcon /> : <AddIcon />}\r\n        </ListItemButton>\r\n      </ListItem>\r\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\" disablePadding>\r\n          <Item itemIndex={itemIndex} />\r\n        </List>\r\n      </Collapse>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ItemList\r\n","import React, { useState, useContext } from 'react'\r\nimport createOrdersContext from '../../context/createOrdersContext'\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  FormLabel,\r\n  Button,\r\n  Box,\r\n  Paper,\r\n  Divider,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Stack,\r\n  Autocomplete,\r\n  List,\r\n  ListItem,\r\n  ListSubheader,\r\n  ListItemButton,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Collapse,\r\n  IconButton,\r\n} from '@mui/material'\r\nimport AddIcon from '@mui/icons-material/Add'\r\nimport RemoveIcon from '@mui/icons-material/Remove'\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport { red } from '@mui/material/colors'\r\n\r\nimport { useHistory, Redirect } from 'react-router-dom'\r\nimport ItemList from './ItemList'\r\nimport Item from './Item'\r\nimport createOrdersReducer from '../createOrdersReducer'\r\n\r\nconst gridItemText = {\r\n  mt: 1,\r\n  mb: 1,\r\n}\r\n\r\nconst pageStyle = {\r\n  width: {\r\n    xs: '100%',\r\n    sm: '380px',\r\n    xl: '380px',\r\n  },\r\n  height: '95vh',\r\n  margin: '0 auto',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'space-between',\r\n  flexGrow: 1,\r\n  flexShrink: 1,\r\n}\r\n\r\nconst formTopLabel = {\r\n  width: '100%',\r\n  height: '50px',\r\n  textAlign: 'center',\r\n  lineHeight: '50px',\r\n}\r\n\r\nfunction Items() {\r\n  const val = useContext(createOrdersContext)\r\n  console.log('in items: val[0]: ', val[0])\r\n  console.log('in items: val[0].items[0]: ', val[0].items[0])\r\n\r\n  const handleAddObject = () => {\r\n    val[1]({\r\n      type: 'CREATE_ORDERS_CREATE_NEW_OBJECT_IN_ITEMS',\r\n      payload: '',\r\n    })\r\n  }\r\n\r\n  const history = useHistory()\r\n  const [errMsg, setErrMsg] = useState('')\r\n  const toMerchantPage = () => {\r\n    let isErr = false\r\n    if (val[0].items.length === 0) {\r\n      setErrMsg('Please create an Object in Items!!')\r\n      isErr = true\r\n      return\r\n    }\r\n    for (let i = 0; i < val[0].items.length; i++) {\r\n      if (val[0].items[i].quantity === '') {\r\n        setErrMsg('Quantity is required!!')\r\n        isErr = true\r\n        break\r\n      } else if (val[0].items[i].price.amount === '') {\r\n        setErrMsg('Price amount field is required!!')\r\n        isErr = true\r\n        break\r\n      } else if (val[0].items[i].price.currency === '') {\r\n        setErrMsg('Price currency field  is required!!')\r\n        isErr = true\r\n        break\r\n      } else if (val[0].items[i].name === '') {\r\n        setErrMsg('Name field is required!!')\r\n        isErr = true\r\n        break\r\n      } else if (val[0].items[i].category === '') {\r\n        setErrMsg('Category field is required!!')\r\n        isErr = true\r\n        break\r\n      } else if (val[0].items[i].sku === '') {\r\n        setErrMsg('Sku field is required!!')\r\n        isErr = true\r\n        break\r\n      }\r\n    }\r\n    if (!isErr) {\r\n      history.replace('/merchant')\r\n    }\r\n  }\r\n  const toShippingPage = () => {\r\n    history.replace('/shipping')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box sx={pageStyle}>\r\n        <Card\r\n          sx={{\r\n            height: '95vh',\r\n            overflowY: 'scroll',\r\n          }}\r\n        >\r\n          <CardContent>\r\n            <Typography\r\n              sx={{ fontSize: 14, ml: '2' }}\r\n              color=\"text.secondary\"\r\n              gutterBottom\r\n            >\r\n              Items\r\n            </Typography>\r\n            {errMsg ? (\r\n              <Box\r\n                sx={{\r\n                  color: 'red',\r\n                  marginLeft: '1em',\r\n                }}\r\n              >\r\n                {errMsg}\r\n              </Box>\r\n            ) : null}\r\n            <List\r\n              sx={{\r\n                width: '100%',\r\n                bgcolor: 'background.paper',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n              }}\r\n              component=\"nav\"\r\n              aria-labelledby=\"nested-list-subheader\"\r\n            >\r\n              {val[0].items.map((itemData, index) => {\r\n                return <ItemList key={`items_${index}`} itemIndex={index} />\r\n              })}\r\n            </List>\r\n            <List\r\n              sx={{\r\n                width: '100%',\r\n                bgcolor: 'background.paper',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n              }}\r\n              component=\"nav\"\r\n              aria-labelledby=\"nested-list-subheader\"\r\n            >\r\n              <ListItem>\r\n                <ListItemButton\r\n                  onClick={handleAddObject}\r\n                  sx={{ width: '100%' }}\r\n                  divider={true}\r\n                >\r\n                  <ListItemText primary=\"ADD OBJECT\" />\r\n                </ListItemButton>\r\n              </ListItem>\r\n            </List>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            sx={{\r\n              backgroundColor: '#21b6ae',\r\n            }}\r\n            type=\"submit\"\r\n            onClick={() => {\r\n              val[1]({\r\n                type: 'SET_DEFAULT_VALUE_FOR_ITEMS_OBJECT',\r\n                payload: '',\r\n              })\r\n            }}\r\n            fullWidth\r\n          >\r\n            {/* quick button: filling form data, to test values do not influence each other between item objects */}\r\n            One more object in items for testing\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            type=\"submit\"\r\n            onClick={toShippingPage}\r\n            fullWidth\r\n          >\r\n            Previous\r\n          </Button>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            onClick={toMerchantPage}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Items\r\n","import axios from 'axios'\r\n\r\n// format for axois.get()\r\nexport default async function myAxios(\r\n  url = '',\r\n  data = {},\r\n  type = 'GET',\r\n  //passing file type for upload\r\n  config = {}\r\n) {\r\n  if (type === 'GET') {\r\n    let dataStr = ''\r\n    Object.keys(data).forEach((key) => {\r\n      dataStr += key + '=' + data[key] + '&'\r\n    })\r\n    if (dataStr !== '') {\r\n      dataStr = dataStr.substring(0, dataStr.lastIndexOf('&'))\r\n      url += '?' + dataStr\r\n    }\r\n    return axios.get(url, config)\r\n  } else {\r\n    return axios.post(url, data)\r\n  }\r\n}\r\n","import myAxios from './myAxios'\r\n\r\nexport const reqCreateOrders = (orderForm) =>\r\n  myAxios('/createOrders', orderForm, 'POST', 'reqRegister')\r\n","import React, { useState, useContext } from 'react'\r\nimport createOrdersContext from '../../context/createOrdersContext'\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  FormLabel,\r\n  Divider,\r\n  Button,\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Stack,\r\n  Autocomplete,\r\n} from '@mui/material'\r\nimport { useHistory, Redirect } from 'react-router-dom'\r\nimport { reqCreateOrders } from '../../../api'\r\n\r\nconst gridItemText = {\r\n  mt: 1,\r\n  mb: 1,\r\n}\r\n\r\nconst pageStyle = {\r\n  width: {\r\n    xs: '100%',\r\n    sm: '380px',\r\n    xl: '380px',\r\n  },\r\n  height: '95vh',\r\n  margin: '0 auto',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'space-between',\r\n  flexGrow: 1,\r\n  flexShrink: 1,\r\n}\r\n\r\nconst formTopLabel = {\r\n  width: '100%',\r\n  height: '50px',\r\n  textAlign: 'center',\r\n  lineHeight: '50px',\r\n}\r\n\r\n// function of submit\r\nconst creatOrdersFn = async (formData) => {\r\n  const response = await reqCreateOrders(formData)\r\n  const result = response.data\r\n\r\n  console.log('result in createOrder', result)\r\n  if (result.status === 200) {\r\n    console.log('checkoutUrl in createOrder', result.data.checkoutUrl)\r\n    return result.data.checkoutUrl\r\n  }\r\n  return 'Faild to create Orders'\r\n}\r\n\r\nfunction MerchantInfo({ waitRes, setWaitRes }) {\r\n  const val = useContext(createOrdersContext)\r\n  console.log('val[0]: ', val[0])\r\n  const history = useHistory()\r\n  const [errMsg, setErrMsg] = useState('')\r\n  console.log('waitRes in Merchant: ', waitRes)\r\n  const handleSubmit = async () => {\r\n    if (val[0].merchant.redirectCancelUrl === '') {\r\n      setErrMsg('RedirectCancelUrl is required!!')\r\n    } else if (val[0].merchant.redirectConfirmUrl === '') {\r\n      setErrMsg('RedirectConfirmUrl is required!!')\r\n    } else {\r\n      console.log('submit form to backend')\r\n      setWaitRes(true)\r\n      const res = await creatOrdersFn(val[0])\r\n      if (res !== 'Faild to create Orders') {\r\n        window.location.href = res\r\n      }\r\n    }\r\n  }\r\n  const toItemsPage = () => {\r\n    history.replace('/items')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box className=\"form\" sx={pageStyle}>\r\n        <div>\r\n          <form>\r\n            <FormLabel sx={formTopLabel} component=\"legend\">\r\n              Merchant\r\n            </FormLabel>\r\n            <div className=\"body-container\">\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n                direction=\"column\"\r\n              >\r\n                {errMsg ? (\r\n                  <Box\r\n                    sx={{\r\n                      color: 'red',\r\n                      marginLeft: '1em',\r\n                    }}\r\n                  >\r\n                    {errMsg}\r\n                  </Box>\r\n                ) : null}\r\n\r\n                <Stack spacing={1} sx={{ width: 300 }}>\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"redirectCancelUrl\"\r\n                    disableClearable\r\n                    value={val[0].merchant.redirectCancelUrl}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_MERCHANT_REDIRECTCANCELURL',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={[\r\n                      'https://portal.staging.scalapay.com/failure-url',\r\n                    ]}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        required={true}\r\n                        {...params}\r\n                        label=\"redirectCancelUrl\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_MERCHANT_REDIRECTCANCELURL',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"redirectConfirmUrl\"\r\n                    disableClearable\r\n                    value={val[0].merchant.redirectConfirmUrl}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_MERCHANT_REDIRECTCONFIRMURL',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={[\r\n                      'https://portal.staging.scalapay.com/success-url',\r\n                    ]}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        required={true}\r\n                        {...params}\r\n                        label=\"redirectConfirmUrl\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_MERCHANT_REDIRECTCONFIRMURL',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n                  <Autocomplete\r\n                    freeSolo\r\n                    id=\"merchantReference\"\r\n                    disableClearable\r\n                    value={val[0].merchantReference}\r\n                    onChange={(e, values) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_MERCHANTREFERENCE',\r\n                        payload: values,\r\n                      })\r\n                    }}\r\n                    options={['merchantOrder-1234']}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"merchantReference\"\r\n                        InputProps={{\r\n                          ...params.InputProps,\r\n                          type: 'text',\r\n                        }}\r\n                        onChange={(e) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_MERCHANTREFERENCE',\r\n                            payload: e.target.value,\r\n                          })\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Divider />\r\n                  <Card>\r\n                    <CardContent>\r\n                      <Typography\r\n                        sx={{ fontSize: 14 }}\r\n                        color=\"text.secondary\"\r\n                        gutterBottom\r\n                      >\r\n                        shippingAmount\r\n                      </Typography>\r\n                      <Autocomplete\r\n                        freeSolo\r\n                        id=\"amount\"\r\n                        disableClearable\r\n                        value={val[0].shippingAmount.amount}\r\n                        onChange={(e, values) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_SHIPPINGAMOUNT_AMOUNT',\r\n                            payload: values,\r\n                          })\r\n                        }}\r\n                        options={['10.00']}\r\n                        renderInput={(params) => (\r\n                          <TextField\r\n                            {...params}\r\n                            label=\"amount\"\r\n                            InputProps={{\r\n                              ...params.InputProps,\r\n                              type: 'text',\r\n                            }}\r\n                            onChange={(e) => {\r\n                              val[1]({\r\n                                type: 'CREATE_ORDERS_UPDATE_SHIPPINGAMOUNT_AMOUNT',\r\n                                payload: e.target.value,\r\n                              })\r\n                            }}\r\n                          />\r\n                        )}\r\n                      />\r\n                      <Divider />\r\n                      <Autocomplete\r\n                        freeSolo\r\n                        id=\"currency\"\r\n                        disableClearable\r\n                        value={val[0].shippingAmount.currency}\r\n                        onChange={(e, values) => {\r\n                          val[1]({\r\n                            type: 'CREATE_ORDERS_UPDATE_SHIPPINGAMOUNT_CURRENCY',\r\n                            payload: values,\r\n                          })\r\n                        }}\r\n                        options={['EUR']}\r\n                        renderInput={(params) => (\r\n                          <TextField\r\n                            {...params}\r\n                            label=\"currency\"\r\n                            InputProps={{\r\n                              ...params.InputProps,\r\n                              type: 'text',\r\n                            }}\r\n                            onChange={(e) => {\r\n                              val[1]({\r\n                                type: 'CREATE_ORDERS_UPDATE_SHIPPINGAMOUNT_CURRENCY',\r\n                                payload: e.target.value,\r\n                              })\r\n                            }}\r\n                          />\r\n                        )}\r\n                      />\r\n                    </CardContent>\r\n                  </Card>\r\n                  <Divider />\r\n\r\n                  <TextField\r\n                    id=\"orderExpiryMilliseconds\"\r\n                    label=\"orderExpiryMilliseconds\"\r\n                    type=\"text\"\r\n                    placeholder=\"orderExpiryMilliseconds...\"\r\n                    value={val[0].orderExpiryMilliseconds}\r\n                    onChange={(e) => {\r\n                      val[1]({\r\n                        type: 'CREATE_ORDERS_UPDATE_ORDEREXPIRYMILLISECONDS',\r\n                        payload: e.target.value,\r\n                      })\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            type=\"submit\"\r\n            onClick={toItemsPage}\r\n            fullWidth\r\n          >\r\n            Previous\r\n          </Button>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            onClick={handleSubmit}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MerchantInfo\r\n","import React, { useState, useEffect } from 'react'\r\nimport TotalAmount from './subForms/TotalAmount'\r\nimport Consumer from './subForms/Consumer'\r\nimport Billing from './subForms/Billing'\r\nimport Shipping from './subForms/Shipping'\r\nimport Items from './subForms/Items'\r\nimport Merchant from './subForms/Merchant'\r\n\r\nimport { Box, CircularProgress, Typography } from '@mui/material'\r\nimport { styled } from '@mui/material/styles'\r\nimport LinearProgress, {\r\n  linearProgressClasses,\r\n} from '@mui/material/LinearProgress'\r\n\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\n// to avoid warning in jest: warning: React.jsx: type is invalid -- expected a string (for build-in components) or a class/function (for composite components) but got: undefined.\r\nimport { Route } from 'react-router'\r\n\r\n// styles for material-ui\r\nconst pageStyle = {\r\n  width: {\r\n    xs: '100%',\r\n    sm: '380px',\r\n    xl: '380px',\r\n  },\r\n  border: {\r\n    xs: '1px yellow solid',\r\n    sm: '1px red solid',\r\n    xl: '1px green solid',\r\n  },\r\n  height: '100vh',\r\n  margin: '0 auto',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  // justifyContent: 'space-between',\r\n  alignItems: 'space-between',\r\n  flexGrow: 1,\r\n  flexShrink: 1,\r\n  // backgroundColor: '#e0e0e0',\r\n}\r\n\r\nconst formTopLabel = {\r\n  width: '100%',\r\n  height: '50px',\r\n  textAlign: 'center',\r\n  lineHeight: '50px',\r\n}\r\n\r\n// customized progress bar: https://mui.com/components/progress/\r\nconst BorderLinearProgress = styled(LinearProgress)(({ theme }) => ({\r\n  height: 10,\r\n  borderRadius: 5,\r\n  [`&.${linearProgressClasses.colorPrimary}`]: {\r\n    backgroundColor:\r\n      theme.palette.grey[theme.palette.mode === 'light' ? 200 : 800],\r\n  },\r\n  [`& .${linearProgressClasses.bar}`]: {\r\n    borderRadius: 5,\r\n    backgroundColor: theme.palette.mode === 'light' ? '#1a90ff' : '#308fe8',\r\n  },\r\n}))\r\n\r\nfunction Form() {\r\n  // variable to show loading page\r\n  const [waitRes, setWaitRes] = useState(false)\r\n\r\n  // check current path and redirect\r\n  const location = useLocation()\r\n  const history = useHistory()\r\n\r\n  console.log('location in Form: ', location)\r\n  console.log('history in Form: ', history)\r\n\r\n  const FormTitle = [\r\n    '/totalAmount',\r\n    '/consumer',\r\n    '/billing',\r\n    '/shipping',\r\n    '/items',\r\n    '/merchant',\r\n  ]\r\n  const [progressWidth, setProgressWidth] = useState(0)\r\n  let path = location.pathname\r\n  useEffect(() => {\r\n    console.log('path in Form page: ', path)\r\n\r\n    if (path === '/') {\r\n      history.replace('/totalAmount')\r\n    }\r\n\r\n    let page = FormTitle.findIndex((item) => item === path)\r\n    if (page !== -1) {\r\n      setProgressWidth((page + 1) * (100 / 6))\r\n    }\r\n  }, [path])\r\n\r\n  return (\r\n    <>\r\n      {/* two parts: progress bar and the forms */}\r\n      {waitRes ? (\r\n        <Box\r\n          sx={{\r\n            height: '100vh',\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Typography\r\n            sx={{ fontSize: 25, mb: 2 }}\r\n            color=\"text.secondary\"\r\n            gutterBottom\r\n          >\r\n            Orders creating\r\n          </Typography>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        <Box className=\"form\" sx={pageStyle}>\r\n          <div>\r\n            <Box\r\n              color=\"secondary\"\r\n              sx={{\r\n                width: '92%',\r\n                height: '15px',\r\n                left: 2,\r\n                mt: 2,\r\n                ml: 2,\r\n              }}\r\n            >\r\n              <BorderLinearProgress\r\n                data-testid=\"linearProgress\"\r\n                variant=\"determinate\"\r\n                value={progressWidth}\r\n              />\r\n            </Box>\r\n          </div>\r\n          <div>\r\n            <Route path=\"/totalAmount\">\r\n              <TotalAmount />\r\n            </Route>\r\n            <Route path=\"/consumer\">\r\n              <Consumer />\r\n            </Route>\r\n            <Route path=\"/billing\">\r\n              <Billing />\r\n            </Route>\r\n            <Route path=\"/shipping\">\r\n              <Shipping />\r\n            </Route>\r\n            <Route path=\"/items\">\r\n              <Items />\r\n            </Route>\r\n            <Route path=\"/merchant\">\r\n              <Merchant waitRes={waitRes} setWaitRes={setWaitRes} />\r\n            </Route>\r\n          </div>\r\n        </Box>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Form\r\n","import React, { FC, useReducer } from 'react'\r\nimport createOrdersReducer from './createOrdersReducer'\r\nimport createOrdersContext from '../context/createOrdersContext'\r\nimport { HashRouter, Route, Switch } from 'react-router-dom'\r\nimport Form from './Form'\r\n\r\n// initial form data stored in useReducer\r\nconst initUserReducer = {\r\n  totalAmount: {\r\n    amount: '',\r\n    currency: '',\r\n  },\r\n  consumer: {\r\n    givenNames: '',\r\n    phoneNumber: '',\r\n    surname: '',\r\n    email: '',\r\n  },\r\n  billing: {\r\n    phoneNumber: '',\r\n    countryCode: '',\r\n    name: '',\r\n    postcode: '',\r\n    suburb: '',\r\n    line1: '',\r\n  },\r\n  shipping: {\r\n    phoneNumber: '',\r\n    countryCode: '',\r\n    name: '',\r\n    postcode: '',\r\n    suburb: '',\r\n    line1: '',\r\n  },\r\n  items: [\r\n    // {\r\n    //   price: {\r\n    //     amount: '',\r\n    //     currency: '',\r\n    //   },\r\n    //   quantity: 1,\r\n    //   gtin: '',\r\n    //   name: '',\r\n    //   category: '',\r\n    //   sku: '',\r\n    //   brand: '',\r\n    // },\r\n    // {\r\n    //   price: {\r\n    //     amount: '',\r\n    //     currency: '',\r\n    //   },\r\n    //   quantity: 2,\r\n    //   gtin: '',\r\n    //   name: '',\r\n    //   category: '',\r\n    //   sku: '',\r\n    //   brand: '',\r\n    // },\r\n  ],\r\n  merchant: {\r\n    redirectCancelUrl: '',\r\n    redirectConfirmUrl: '',\r\n  },\r\n  shippingAmount: {\r\n    amount: '',\r\n    currency: '',\r\n  },\r\n  orderExpiryMilliseconds: 600000,\r\n  merchantReference: '',\r\n}\r\n\r\n// useReducer + useMemo + useContext = State Container\r\nconst { Provider } = createOrdersContext\r\n\r\nconst StoreProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(createOrdersReducer, initUserReducer)\r\n  const store = React.useMemo(() => [state, dispatch], [state])\r\n  console.log('store in createOrders context value: ', store)\r\n  return <Provider value={store}> {children} </Provider>\r\n}\r\n\r\nconst index = () => {\r\n  return (\r\n    <div className=\"create-orders\">\r\n      <StoreProvider>\r\n        <HashRouter>\r\n          <Switch>\r\n            <Route>\r\n              <Form />\r\n            </Route>\r\n          </Switch>\r\n        </HashRouter>\r\n      </StoreProvider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default index\r\n","import React from 'react'\r\nimport './App.css'\r\nimport CreateOrders from './components/createOrders'\r\n\r\nimport {\r\n  ThemeProvider,\r\n  Theme,\r\n  StyledEngineProvider,\r\n  createTheme,\r\n} from '@mui/material/styles'\r\n\r\n// declare module '@mui/styles/defaultTheme' {\r\n//   // eslint-disable-next-line @typescript-eslint/no-empty-interface\r\n//   interface DefaultTheme extends Theme { }\r\n// }\r\n\r\nconst theme = createTheme()\r\n\r\nfunction App() {\r\n  return (\r\n    <StyledEngineProvider injectFirst>\r\n      <ThemeProvider theme={theme}>\r\n        <CreateOrders />\r\n      </ThemeProvider>\r\n    </StyledEngineProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}